import { Request, Response } from "express";
import jwt from "jsonwebtoken";
import { prisma } from "../../database";
import dotenv from "dotenv";

dotenv.config();

const SSO_SECRET = process.env.SSO_SECRET as string;

export const login = async (req: Request, res: Response) => {
  try {
    const { email, matricula } = req.body;

    if (!email || !matricula) {
      return res.status(400).json({ message: "Email e matr칤cula s칚o obrigat칩rios" });
    }

    const user = await prisma.usuario.findFirst({
      where: { email },
    });

    if (!user || user.matricula !== matricula) {
      return res.status(401).json({ message: "Credenciais inv치lidas" });
    }

    if (user.ativo === false) {
      return res.status(403).json({ message: "Usu치rio inativo" });
    }

    // 游댠 Gerando o SSO Token 游댠
    const sso_token = jwt.sign({ email: user.email }, SSO_SECRET, {
      expiresIn: "5m", // O SSO Token tem um tempo curto de validade
    });

    res.json({
      message: "Login bem-sucedido",
      user: {
        id: user.id,
        nome: user.nome,
        email: user.email,
        telefone: user.telefone,
        matricula: user.matricula,
        celular: user.celular,
        role: user.role,
        ativo: user.ativo,
      },
      sso_token, // 游댠 Retornamos o SSO Token para ser usado no Sistema B
    });
  } catch (error) {
    console.error("Erro no login:", error);
    res.status(500).json({
      message: "Erro interno do servidor",
      error: error instanceof Error ? error.message : "Erro desconhecido",
    });
  }
};
O front-end do Sistema A redireciona o usu치rio para o Sistema B com esse token:
js
Copiar
Editar
window.location.href = `https://sistemab.com/auth/sso-login?sso_token=${sso_token}`;