/*-- Usuários do sistema

CREATE TABLE usuarios (
    usuario_id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    url_imagem_perfil VARCHAR(450),
    senha_hash VARCHAR(255) NOT NULL,
    papel VARCHAR(50) DEFAULT 'usuario',
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Clientes
CREATE TABLE clientes (
    cliente_id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL, -- Nome do cliente
    email VARCHAR(100) UNIQUE, -- Email do cliente (opcional, mas útil)
    telefone VARCHAR(20), -- Telefone de contato
    endereco TEXT, -- Endereço do cliente
    cidade VARCHAR(100), -- Cidade
    estado_id INT REFERENCES estados(estado_id), -- Relação com a tabela de estados
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Data de criação do cliente
);

-- Estados
CREATE TABLE estados (
    estado_id SERIAL PRIMARY KEY,
    sigla_estado CHAR(2) UNIQUE NOT NULL,
    nome_estado VARCHAR(100) NOT NULL
);

-- Produtos
CREATE TABLE produtos (
    produto_id SERIAL PRIMARY KEY,
    nome_produto VARCHAR(255) NOT NULL,
    descricao_produto TEXT,
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Preços por estado
CREATE TABLE precos_por_estado (
    preco_id SERIAL PRIMARY KEY,
    produto_id INT REFERENCES produtos(produto_id),
    estado_id INT REFERENCES estados(estado_id),
    preco NUMERIC(10, 2) NOT NULL,
    atualizado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Orçamentos
CREATE TABLE orcamentos (
    orcamento_id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES usuarios(usuario_id),
    cliente_id INT REFERENCES clientes(cliente_id),
    valor_total NUMERIC(15, 2) DEFAULT 0.00,
    status VARCHAR(50) DEFAULT 'em aberto', -- em aberto, aprovado, faturado
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Itens do orçamento
CREATE TABLE itens_orcamento (
    item_orcamento_id SERIAL PRIMARY KEY,
    orcamento_id INT REFERENCES orcamentos(orcamento_id) ON DELETE CASCADE,
    produto_id INT REFERENCES produtos(produto_id),
    quantidade INT NOT NULL,
    estado_id INT REFERENCES estados(estado_id),
    preco NUMERIC(10, 2) NOT NULL,
    total NUMERIC(15, 2) NOT NULL
);

-- Aprovações
CREATE TABLE aprovacoes (
    aprovacao_id SERIAL PRIMARY KEY,
    orcamento_id INT REFERENCES orcamentos(orcamento_id),
    aprovado_por INT REFERENCES usuarios(usuario_id),
    aprovado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Faturamentos
CREATE TABLE faturamentos (
    faturamento_id SERIAL PRIMARY KEY,
    orcamento_id INT REFERENCES orcamentos(orcamento_id),
    total_faturado NUMERIC(15, 2) NOT NULL,
    emitido_por INT REFERENCES usuarios(usuario_id),
    emitido_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Empenhos
CREATE TABLE empenhos (
    empenho_id SERIAL PRIMARY KEY,
    orcamento_id INT REFERENCES orcamentos(orcamento_id),
    total_empenhado NUMERIC(15, 2) NOT NULL,
    empenhado_por INT REFERENCES usuarios(usuario_id),
    empenhado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/





'use client'

//import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';


ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);



function Dashboard() {
 
  //const data = {
   // labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
   // datasets: [
   //   {
    //    label: 'Transações Mensais',
    //    data: [12, 19, 3, 5, 2, 3],
    //    borderColor: 'rgba(75,192,192,1)',
   //     backgroundColor: 'rgba(75,192,192,0.2)',
   //     fill: true,
  //    },
 //   ],
//  };

  // Configurações do gráfico
  //const options = {
   // responsive: true,
  //  plugins: {
   //   title: {
   //     display: true,
   //     text: 'Transações ao Longo do Ano',
    //  },
  //  },
  //};
    return(
        //<main className='sm:ml-40  relative'>
    <div className="p-6 space-y-6 sm:ml-40  relative">
      <h1 className="text-2xl font-bold text-gray-800">Dashboard</h1>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Card Resumo de Lavacars */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold">Lavacars Cadastrados</h3>
          <p className="text-2xl font-bold">12</p>
        </div>

        {/* Card Resumo de Clientes */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold">Clientes Ativos</h3>
          <p className="text-2xl font-bold">250</p>
        </div>

        {/* Card Resumo de Transações */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold">Transações Realizadas</h3>
          <p className="text-2xl font-bold">350</p>
        </div>
      </div>

     { /* Gráfico de Transações 
      <div className="bg-white p-6 rounded-lg shadow-md mt-6">
        <Line data={data} options={options} />
      </div>

       Tabela de Transações Recentes */}
      <div className="bg-white p-6 rounded-lg shadow-md mt-6">
        <h3 className="text-lg font-semibold mb-4">Transações Recentes</h3>
        <table className="min-w-full table-auto">
          <thead>
            <tr className="bg-gray-100">
              <th className="px-4 py-2">ID</th>
              <th className="px-4 py-2">Cliente</th>
              <th className="px-4 py-2">Lavacar</th>
              <th className="px-4 py-2">Valor Desconto</th>
              <th className="px-4 py-2">Data</th>
            </tr>
          </thead>
          <tbody>
           
              <tr className="border-t">
                <td className="px-4 py-2">1</td>
                <td className="px-4 py-2">2</td>
                <td className="px-4 py-2">3</td>
                <td className="px-4 py-2">4</td>
                <td className="px-4 py-2">5</td>
              </tr>
    
          </tbody>
        </table>
      </div>
    </div>
          
    )  //  </main> 
    
}

export default Dashboard;











"use client";
import Link from 'next/link';
import React, { useContext, useState } from 'react';
import { AxiosError } from "axios";
import { makeRequest } from '../../../../axios';
import {toast} from 'react-toastify';
import { useRouter } from 'next/navigation';
import { UserContext } from '@/context/UserContext';
import InputAuth from '@/components/inputAuth';

const LoginPage = () => {
  const [email, setEmail] = useState('');
  const [error, setError ] = useState('');
  const [senhaHash, setSenhaHash] = useState('');
  const { setUser}= useContext(UserContext)
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
  
    try {
      const res = await makeRequest.post("/auth/login", { email, senhaHash });
      if (typeof window !== "undefined") {
        localStorage.setItem("orcamento:user", JSON.stringify(res.data.usuario));
      }
      setUser(res.data.usuario);
      router.push("/dashboard");
    } catch (error) {
      if (error instanceof AxiosError) {
        toast.error(error.response?.data?.message || "Erro ao fazer login")
        setError(error.response?.data?.message || "Erro ao fazer login");
      } else {
        setError("Erro inesperado ao fazer login");
        toast.error("Erro inesperado ao fazer login")
      }
      console.log(error);
    }
  };

  return (
    <>
          <h2 className="text-3xl font-semibold text-center text-gray-700">Modulo Orçamento</h2>
            <div>
              <div>
                <InputAuth placeholder="Digite seu email" label={'E-mail'} newState={setEmail}/>
              </div>
              <div>
               <InputAuth  placeholder="Digite sua senha" label='Senha' newState={setSenhaHash}  Ispassword/>
              </div>
              {error && <span className="text-red-500 my-3">{error}</span>}
              <button
              onClick={(e)=>handleSubmit(e)}
                type="submit"
                className="w-full py-3 mt-3 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400"
              >
                Entrar
              </button>

        </div>
          <p className="text-center text-sm font-bold text-gray-500">
            Já tem uma conta? 
            <Link href='/register' className="text-blue-600 hover:underline">
              Criar uma conta
            </Link>
          </p>
     
          </>
  );
};

export default LoginPage;

const Dashboard = () => {
  const { user, isAdmin, isFuncionario } = useContext(UserContext);

  if (!user) {
    return <h1>Carregando...</h1>; // Caso o usuário ainda não esteja carregado
  }

  if (isAdmin) {
    return <h1>Bem-vindo ao painel administrativo de {user.nomeEstabelecimento}</h1>;
  }

  if (isFuncionario) {
    return <h1>Bem-vindo ao painel do Funcionário de {user.nomeEstabelecimento}</h1>;
  }

  return <h1>Você não tem acesso a essa página</h1>;
};

export default Dashboard;